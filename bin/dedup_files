#!/usr/bin/env ruby

require "fileutils"
require "pathname"
require "digest"

class DedupFiles
  attr_reader :files
  def initialize
    @files = []
    @total = 0
  end
  def add(fn)
    fn = Pathname(fn)
    if fn.directory?
      fn.children.each do |cfn|
        add(cfn)
      end
    elsif fn.file?
      @files << fn
    end
  end

  def rm_dup_of!(file, base)
    @total += file.size
    puts "`#{file}' is a duplicate of `#{base}'"
    FileUtils.rm_f file
  end

  def dedup_group!(fns)
    by_hash = {}
    fns.each do |fn|
      d = Digest::SHA1.new.file(fn).hexdigest
      (by_hash[d] ||= []) << fn
    end
    by_hash.each do |h, files|
      keep = files.shift
      files.each do |fn|
        rm_dup_of!(fn, keep)
      end
    end
  end

  def dedup_1!
    by_sz_and_bn = {}
    @files.each do |fn|
      next unless fn.exist?
      key = [fn.size, fn.basename.to_s]
      (by_sz_and_bn[key] ||= []) << fn
    end
    by_sz_and_bn.values.each do |fns|
      dedup_group!(fns) if fns.size > 1
    end
  end

  def dedup_2!
    by_sz = {}
    @files.each do |fn|
      next unless fn.exist?
      (by_sz[fn.size] ||= []) << fn
    end
    by_sz.values.each do |fns|
      dedup_group!(fns) if fns.size > 1
    end
  end

  def dedup!
    dedup_1!
    dedup_2!
    puts "#{@total} bytes in duplicated files" if @total > 0
  end
end

if ARGV.size == 0
  STDERR.puts "Usage: #{$0} <dir1> <dir2> ..."
  exit 1
end

df = DedupFiles.new
ARGV.each{|fn| df.add(fn) }

df.dedup!
