#!/usr/bin/env ruby

require "pathname"
require "shellwords"
require "moneta"
require "digest"
require "trollop"

class Pathname
  def shellescape
    to_s.shellescape
  end
end

class MediaFile < Pathname
  Cache = Moneta.new(:PStore, file: "#{ENV["HOME"]}/.media_size.cache")
  def media_file?
    case extname.downcase
    when *%W[.mp4 .avi .flv .mp3 .mpg .mkv .flv .wmv .asf]
      true
    when *%W[.sub .txt .jpg .png .srt .nfo .pdf .m3u], ""
      false
    else
      `file -ib #{@path.shellescape}` =~ %r[\A(audio|video)/]
    end
  end
  def cache_key
    @cache_key ||= [expand_path.to_s, size, mtime.to_i]
  end
  def duration
    begin
      Cache[cache_key] ||= compute_duration
    rescue
      warn "FAIL: #{$!}"
      0
    end
  end
  def compute_duration
    answer = `exiftool -n -s -Duration -PlayDuration #{shellescape}`.sub(" (approx)", "")
    if answer.empty?
      # warn "Unknown size of #{@path}"
      0
    elsif answer =~ /\A(?:Track|Play)?Duration\s*:\s*(\d+\.?\d*)\s*\z/
      $1.to_i
    else
      warn "Parse error: `#{answer}'"
      0
    end
  end
end

class MediaDirectory < Pathname
  def media_files
    unless @media_files
      @media_files = []
      find do |file|
        next if file.directory?
        file = MediaFile.new(file)
        @media_files << file if file.media_file?
      end
    end
    @media_files
  end
  def duration
    @duration ||= media_files.map(&:duration).inject(0, &:+)
  end
end

class MediaSizeReporter
  def initialize(paths, print_totals)
    @dirs = paths.map{|x|
      MediaDirectory.new(x)
    }
    @print_totals = print_totals
  end
  def duration
    @dirs.map(&:duration).inject(0, &:+)
  end
  def format_time(s)
    "%d:%02d:%02d" % [s/3600, s/60%60, s%60]
  end
  def report!
    @dirs.each do |dir|
      if dir.directory? or dir.duration > 0
        puts "#{dir}: #{format_time(dir.duration)}"
      end
    end
    puts "Total: #{format_time(duration)}" if @print_totals
  end
end

opts = Trollop::options do
  opt :totals, "Print totals"
end

if ARGV.empty?
  STDERR.puts "Usage: #{$0} [-t] <media_dir1> <media_dir2> ..."
  exit 1
else
  MediaSizeReporter.new(ARGV, opts[:totals]).report!
end
