#!/usr/bin/env ruby

require "pathname"
require "shellwords"
require "moneta"
require "digest"

class Pathname
  def shellescape
    to_s.shellescape
  end
end

def format_time(s)
  "%d:%02d:%02d" % [s/3600, s/60%60, s%60]
end

class MediaFile
  Cache = Moneta.new(:PStore, file: "#{ENV["HOME"]}/.media_size.cache")
  def initialize(path)
    @path = path
  end
  def cache_key
    @cache_key ||= [File.absolute_path(@path), File.size(@path), File.mtime(@path).to_i]
  end
  def duration
    begin
      Cache[cache_key] ||= compute_duration
    rescue
      puts "FAIL: #{$!}"
      0
    end
  end
  def compute_duration
    answer = `exiftool -n -s -Duration -PlayDuration #{@path.shellescape}`
    answer.sub!(" (approx)", "")
    if answer.empty?
      # warn "Unknown size of #{@path}"
      0
    elsif answer =~ /\A(?:Track|Play)?Duration\s*:\s*(\d+\.?\d*)\s*\z/
      $1.to_i
    else
      warn "Parse error: `#{answer}'"
      0
    end
  end
end

class MediaDirectory
  def initialize(path)
    @path = path
  end
  def each_media_file
    @path.find do |file|
      next if file.directory?
      case File.extname(file).downcase
      when *%W[.mp4 .avi .flv .mp3 .mpg .mkv .flv .wmv .asf]
        yield file
      when *%W[.sub .txt .jpg .png .srt .nfo .pdf .m3u], ""
        # skip
      else
        if `file -ib #{file.shellescape}` =~ %r[\A(audio|video)/]
          yield file
        end
      end
    end
  end
  def file_duration(file)
    MediaFile.new(file).duration
  end
  def print_total!
    total = 0
    each_media_file do |file|
      total += file_duration(file)
    end
    if @path.directory? or total > 0
      puts "#{@path}: #{format_time(total)}"
    end
    total
  end
end

class MediaSizeReporter
  def initialize(paths, print_totals)
    @dirs = paths.map{|x|
      MediaDirectory.new(Pathname(x))
    }
    @print_totals = print_totals
  end

  def report!
    total = 0
    @dirs.each do |dir|
      total += dir.print_total!
    end
    puts "Total: #{format_time(total)}" if @print_totals
  end
end

print_totals = false
if ARGV[0] == "-t"
  ARGV.shift
  print_totals = true
end

if ARGV.empty?
  STDERR.puts "Usage: #{$0} [-t] <media_dir1> <media_dir2> ..."
  exit 1
else
  MediaSizeReporter.new(ARGV, print_totals).report!
end
