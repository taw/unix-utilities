#!/usr/bin/env ruby

require "pathname"
require "shellwords"
require "moneta"
require "digest"
require "optimist"

class Pathname
  def shellescape
    to_s.shellescape
  end
end

Cache = Moneta.new(:PStore, file: "#{ENV["HOME"]}/.media_size.cache")

class MediaFile < Pathname
  def media_file?
    case extname.downcase
    when *%W[.mp4 .avi .flv .mp3 .mpg .mkv .flv .wmv .asf .m4b]
      true
    when *%W[.sub .txt .jpg .png .srt .nfo .pdf .m3u .doc .mobi .gif .cue], ""
      false
    else
      `file --mime-type -b #{@path.shellescape}` =~ %r[\A(audio|video)/]
    end
  end

  def try_realpath
    (realpath rescue expand_path)
  end

  def cache_key
    @cache_key ||= [try_realpath.to_s, size, mtime.to_i]
  end

  # For local media files fails tend to be permanent
  # so we could cache them, but if you have network-mounted files
  # then temporary failures are possible and can be retried
  def duration
    cached = Cache[cache_key]
    return cached if cached
    computed = compute_duration
    # Do not cache errors
    Cache[cache_key] = computed unless computed == 0
    computed
  rescue
    warn "FAIL: #{$!}"
    0
  end

  def compute_duration
    if extname.downcase == ".mp3"
      # It seems more accurate
      compute_duration_mp3info
    else
      compute_duration_exiftool
    end
  end

  def compute_duration_mp3info
    answer = `mp3info -p "%S" #{shellescape}`
    if answer.empty?
      # warn "Unknown size of #{@path}"
      0
    elsif answer =~ /\A\d+\s*\z/
      answer.to_i
    else
      warn "Parse error: `#{answer}'"
      0
    end
  end

  def compute_duration_exiftool
    answer = `exiftool -n -s -Duration -PlayDuration #{shellescape}`.sub(" (approx)", "")
    if answer.empty?
      # warn "Unknown size of #{@path}"
      0
    elsif answer =~ /\A(?:Track|Play)?Duration\s*:\s*(\d+\.?\d*)\s*\z/
      $1.to_i
    else
      warn "Parse error: `#{answer}'"
      0
    end
  end
end

class MediaURL
  def initialize(url)
    @url = url
  end

  def cache_key
    @cache_key ||= [@url]
  end

  # For URLs we do not cache fails, as that's likely a network issue and can be retried
  def duration
    cached = Cache[cache_key]
    return cached if cached
    computed = compute_duration
    return 0 unless computed
    Cache[cache_key] = computed
  rescue
    warn "FAIL: #{$!}"
    0
  end

  def compute_duration
    answer = `youtube-dl --get-duration #{@url.shellescape}`
    if answer.empty?
      warn "Unknown size of #{@url}"
      nil
    elsif answer =~ /\A((?:\d+:)?\d?\d:\d\d\s+)+\z/
      answer.split.map{|part|
        hms = part.split(":")
        hms = [0, *hms] if hms.size < 3
        h,m,s = hms
        h.to_i*3600 + m.to_i*60 + s.to_i
      }.inject(0, &:+)
    else
      warn "Parse error: `#{answer}'"
      nil
    end
  end

  def to_s
    @url
  end
end

class MediaDirectory < Pathname
  def media_files
    unless @media_files
      @media_files = []
      retry_on_eintr do
        find do |file|
          next if file.directory?
          file = MediaFile.new(file)
          @media_files << file if file.media_file?
        end
      end
    end
    @media_files
  end

  def duration
    @duration ||= media_files.map(&:duration).inject(0, &:+)
  end

  # It is absolute bullshit that neither sshfs, fuse, nor ruby handles it automatically
  # and we have to do this in-app, but this is necessary for media_size to work over sshfs
  def retry_on_eintr
    5.times do
      return yield
    rescue Errno::EINTR
      warn "EINTR, retrying"
    end
  end
end

class MediaSizeReporter
  def initialize(paths, print_totals, sorted, empty)
    @dirs = paths.map do |x|
      if x =~ /\Ahttps?:/
        MediaURL.new(x)
      else
        MediaDirectory.new(x)
      end
    end
    @print_totals = print_totals
    @sorted = sorted
    @empty = empty
  end

  def duration
    @dirs.map(&:duration).inject(0, &:+)
  end

  def format_time(s)
    "%d:%02d:%02d" % [s/3600, s/60%60, s%60]
  end

  def report_dir!(dir)
    if dir.is_a?(MediaURL)
      puts "#{dir}: #{format_time(dir.duration)}"
    else
      return unless dir.directory? or dir.duration > 0
      return unless dir.duration > 0 if @empty
      puts "#{dir}: #{format_time(dir.duration)}"
    end
  end

  def each_dir(&blk)
    if @sorted
      @dirs.sort_by(&:duration).each(&blk)
    else
      @dirs.each(&blk)
    end
  end

  def report!
    each_dir do |dir|
      report_dir!(dir)
    end
    puts "Total: #{format_time(duration)}" if @print_totals
  end
end

opts = Optimist::options do
  opt :empty, "Skip empty in report"
  opt :totals, "Print totals"
  opt :sorted, "Sort by size"
end

if ARGV.empty?
  STDERR.puts "Usage: #{$0} [-t] <media_dir1> <media_dir2> ..."
  exit 1
else
  MediaSizeReporter.new(ARGV, opts[:totals], opts[:sorted], opts[:empty]).report!
end
