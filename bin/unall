#!/usr/bin/env ruby

require "fileutils"
require "shellwords"
require "optimist"

class UnarchiveFile
  Formats = {
    :rar  => %w[.rar .cbr],
    :"7z" => %w[.7z .zip .cbz .jar .civ5mod],
    :tgz  => %w[.tgz .tar.gz .gem],
    :tbz2 => %w[.tbz2 .tar.bz2],
    :tar  => %w[.tar],
    :txz  => %w[.tar.xz],
    :single_file => %w[.gz .bz2 .xz],
  }

  def formats
    @formats ||= Formats.map{|fmt, exts| exts.map{|ext| [fmt, ext]}}.flatten(1)
  end

  def initialize(path, force_separate_dir)
    @path = File.expand_path(path)
    @force_separate_dir = force_separate_dir
  end

  def mime_type
    `file -b --mime-type #{@path.shellescape}`.chomp
  end

  def basename
    File.basename(@path)
  end

  def call
    return "Looking like multipart, skipping" if @path =~ /part/i
    fmt_ext = detect_format or return "Not supported"
    fmt, ext = fmt_ext
    if needs_directory?(fmt)
      dnx = create_directory(basename[0...-ext.size])
      Dir.chdir(dnx){ send("unpack_#{fmt}") ? "OK" : "FAIL" }
    else
      send("unpack_#{fmt}") ? "OK" : "FAIL"
    end
  end

  def create_directory(dn)
    counter = 1
    dnx = dn
    while File.exist?(dnx)
      dnx = "#{dn}-#{counter}"
      counter += 1
    end
    FileUtils.mkdir_p dnx
    return dnx
  end

  def needs_directory?(fmt)
    return true if @force_separate_dir
    prefixes = send("files_#{fmt}").map{|f| f.sub(/\/.*/, "")}.uniq.select{|f| f != ""}
    return true if prefixes.size > 1
    return true if File.exist?(prefixes[0])
    false
  end

  def detect_format
    formats.each do |fmt, ext|
      if basename.downcase[-ext.size..-1] == ext
        return [fmt, ext]
      end
    end
    if mime_type == "application/zip"
      return [:"7z", File.extname(@path)]
    end
    return nil
  end

  def files_rar
    `unrar vb #{@path.shellescape}`.split("\n")
  end
  def files_7z
    # First is archive name
    `7za l -slt #{@path.shellescape}`.scan(/^Path = (.*)/).flatten[1..-1]
  end
  def files_tgz
    `tar -tzf #{@path.shellescape}`.split("\n")
  end
  def files_tbz2
    `tar -tjf #{@path.shellescape}`.split("\n")
  end
  def files_tar
    `tar -tf #{@path.shellescape}`.split("\n")
  end
  def files_txz
    `tar -tf #{@path.shellescape}`.split("\n")
  end
  def files_single_file
    [File.basename(@path, File.extname(@path))]
  end

  def unpack_rar
    system "unrar", "x", @path
  end
  def unpack_7z
    system "7za", "x", @path
  end
  def unpack_tgz
    system "tar", "-xzf", @path
  end
  def unpack_tbz2
    system "tar", "-xjf", @path
  end
  def unpack_txz
    system "tar", "-xf", @path
  end
  def unpack_tar
    system "tar", "-xf", @path
  end
  def unpack_single_file
    system "7za", "x", @path
  end
end

class UnarchiveCommand
  def initialize
    @opts = Optimist::options do
      opt :keep, "Keep original archive even if unpacking was successful"
      opt :dir, "Force unpacking into new directory even when all files are in one directory already"
    end

    if ARGV.empty?
      STDERR.puts "Usage:\n  #{$0} [--keep] [--dir] archive1.zip archive2.rar archive3.7z"
      exit 1
    end
    @paths = ARGV
  end

  def call
    statuses = Hash.new{|ht,k| ht[k] = []}

    @paths.each do |path|
      ua = UnarchiveFile.new(path, @opts[:dir])
      status = ua.call
      statuses[status] << path
    end

    statuses.each do |status, files|
      puts [status, *files].join(" ")
      system "trash", *files if status == "OK" and not @opts[:keep]
    end
  end
end

UnarchiveCommand.new.call
