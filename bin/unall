#!/usr/bin/env ruby

require "fileutils"
require "shellwords"
require "trollop"

class Unarchiver
  Formats = {
    :rar  => %w[.rar .cbr],
    :"7z" => %w[.7z .zip .cbz],
    :tgz  => %w[.tgz .tar.gz .gem],
    :tbz2 => %w[.tbz2 .tar.bz2],
    :tar  => %w[.tar],
  }
  attr_accessor :force_separate_dir
  attr_reader :statuses
  def initialize
    @statuses = Hash.new{|ht,k| ht[k] = []}
    @force_separate_dir = false
  end
  def formats
    @formats ||= Formats.map{|fmt, exts| exts.map{|ext| [fmt, ext]}}.flatten(1)
  end
  def unarchive_run(fn)
    bn = File.basename(fn)
    formats.each do |fmt, ext|
      if bn.downcase.reverse[0, ext.size] == ext.reverse
        dn = bn[0...-ext.size]
        prefixes = send("files_#{fmt}", fn).map{|f| f.sub(/\/.*/, "")}.uniq.select{|f| f != ""}
        if prefixes.size == 1 and !File.exist?(prefixes[0]) and !force_separate_dir
          return send("unpack_#{fmt}", fn)
        else
          FileUtils.mkdir_p dn
          return Dir.chdir(dn){ send("unpack_#{fmt}", fn) ? "OK" : "FAIL" }
        end
      end
    end
    return "Not supported"
  end
  def unarchive(fn)
    if fn =~ /part/i
      return "Looking like multipart, skipping"
    end
    fn = File.expand_path(fn)
    @statuses[unarchive_run(fn)] << fn
  end
  def files_rar(fn)
    `unrar vb #{fn.shellescape}`.split("\n")
  end
  def files_7z(fn)
    `7za l -slt #{fn.shellescape}`.scan(/^Path = (.*)/).flatten
  end
  def files_tgz(fn)
    `tar -tzf #{fn.shellescape}`.split("\n")
  end
  def files_tbz2(fn)
    `tar -tjf #{fn.shellescape}`.split("\n")
  end
  def files_tar(fn)
    `tar -tf #{fn.shellescape}`.split("\n")
  end

  def unpack_rar(fn)
    system "unrar", "x", fn
  end
  def unpack_7z(fn)
    system "7za", "x", fn
  end
  def unpack_tgz(fn)
    system "tar", "-xzf", fn
  end
  def unpack_tbz2(fn)
    system "tar", "-xjf", fn
  end
  def unpack_tar(fn)
    system "tar", "-xf", fn
  end
end

opts = Trollop::options do
  opt :keep, "Keep original archive even if unpacking was successful"
  opt :dir, "Force unpacking into new directory even when all files are in one directory already"
end

if ARGV.empty?
  STDERR.puts "Usage:\n  #{$0} [--keep] [--dir] archive1.zip archive2.rar archive3.7z"
  exit 1
end

ua = Unarchiver.new
ua.force_separate_dir = opts[:dir]

ARGV.each do |fn|
  ua.unarchive(fn)
end
ua.statuses.each do |status, files|
  puts [status, *files].join(" ")
  system "trash", *files if status == "OK" and not opts[:keep]
end
