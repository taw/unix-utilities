#!/usr/bin/env ruby

require "pathname"

class Pathname
  def without_extname
    Pathname(to_s.chomp(extname))
  end
end

class Hash
  def hzip(other)
    result = {}
    each do |k,v|
      result[k] ||= [nil, nil]
      result[k][0] = v
    end
    other.each do |k,v|
      result[k] ||= [nil, nil]
      result[k][1] = v
    end
    result
  end
end

class BooksRepository
  attr_reader :path
  def initialize(path)
    @path = Pathname(path)
    raise "Invalid path `#{@path}'" unless @path.exist?
  end

  def files
    @path.find.select(&:file?).reject{|path|
      path.dirname.extname == ".sdr"
    }.map{|path| path.relative_path_from(@path)}
  end

  def file_groups
    Hash[files.group_by(&:without_extname).map do |prefix, paths|
      [prefix, paths.map(&:extname).sort]
    end]
  end

  def print!
    file_groups.sort.each do |prefix, exts|
      puts "#{prefix} (#{exts.join(" ")})"
    end
  end
end

class KindleSync
  def initialize(repo_path, device_path)
    @repo   = BooksRepository.new(repo_path)
    @device = BooksRepository.new(device_path)
  end

  def books
    @books ||= @repo.file_groups.hzip(@device.file_groups)
  end

  def repo_state(book)
    books[book][0]
  end

  def device_state(book)
    books[book][1]
  end

  def sync_command(state1, state2)
    return :ok    if state1 == state2
    return :copy  if state1 == [".pdf"] and state2 == nil
    return :cleanup if state1 == nil
    return :unknown
  end

  def format_state(state)
    return "-" unless state
    state.sort.join(" ")
  end

  def report!
    books.sort.each do |book, (state1, state2)|
      cmd = sync_command(state1, state2)
      puts "#{book} (#{format_state state1} | #{format_state state2} | #{cmd})" unless cmd == :ok
    end
  end

  def copy_file!(a, b)
    raise "Already exists: `#{b}'" if b.exist?
    b.dirname.mkpath
    FileUtils.cp a, b
  end

  def copy_book!(book)
    raise if device_state(book)
    repo_state(book).each do |ext|
      copy_file! Pathname("#{@repo.path + book}#{ext}"), Pathname("#{@device.path + book}#{ext}")
    end
  end

  def sync!
    books.sort.each do |book, (state1, state2)|
      cmd = sync_command(state1, state2)
      case cmd
      when :ok
        # OK
      when :cleanup
        # Use separate command for that
      when :copy
        copy_book!(book)
      when :warn
        puts "#{book} (#{format_state state1} | #{format_state state2} | #{cmd})"
        warn "Don't know how to sync this book"
      end
    end
  end

  def cleanup_book!(book)
    raise if repo_state(book)
    device_state(book).each do |ext|
      system "trash", "#{@device.path + book}#{ext}"
    end
  end

  def cleanup!
    books.sort.each do |book, (state1, state2)|
      cmd = sync_command(state1, state2)
      cleanup_book! book if cmd == :cleanup
    end
  end
end

case [ARGV.size, ARGV[0]]
when [3, "--report"]
  ks = KindleSync.new(ARGV[1], ARGV[2])
  ks.report!
when [3, "--sync"]
  ks = KindleSync.new(ARGV[1], ARGV[2])
  ks.sync!
when [3, "--cleanup"]
  ks = KindleSync.new(ARGV[1], ARGV[2])
  ks.cleanup!
when [2, "--list"]
  repo = BooksRepository.new(ARGV[1])
  repo.print!
else
  STDERR.puts "Usage: #{$0} --report  /repository/path /device/documents/path"
  STDERR.puts "   or: #{$0} --sync    /repository/path /device/documents/path"
  STDERR.puts "   or: #{$0} --cleanup /repository/path /device/documents/path"
  STDERR.puts "   or: #{$0} --list    /repository/path"
  exit 1
end
